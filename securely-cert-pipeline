pipeline {
    agent any

    environment {
        PROJECT_NAME        = "Saran UI"
        REGISTRY            = "34.171.177.223:5000"
        IMAGE_NAME          = "saran-ui-app"
        CONTAINER_NAME      = "saran-ui-container"
        FULL_IMAGE_NAME     = "${REGISTRY}/${IMAGE_NAME}:latest"
        REPO_URL            = "https://github.com/data-on-disk/saaraninfosphere-main-ui.git"
        EMAIL_SENDER        = "ashishrajdevops@gmail.com"
        EMAIL_RECIPIENTS    = "naunish@dataondisk.com,raj@dataondisk.com,akumar@dataondisk.com"
        APP_PORT            = "443"
        SSH_USER            = "ashis"
        VM1_IP              = "34.170.226.253"
        CREDENTIALS_ID      = "gcp-ssh-key"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'github-creds', url: "${REPO_URL}", branch: 'deploy'
            }
        }

        stage('Copy SSL Cert from VM') {
            steps {
                script {
                    sshagent(credentials: ["${CREDENTIALS_ID}"]) {
                        sh """
                        echo "Copying SSL certificate and key from VM: ${VM1_IP}"
                        mkdir -p etc/nginx/ssl
                        scp -o StrictHostKeyChecking=no ${SSH_USER}@${VM1_IP}:/etc/nginx/ssl/cert.pem etc/nginx/ssl/
                        scp -o StrictHostKeyChecking=no ${SSH_USER}@${VM1_IP}:/etc/nginx/ssl/key.pem etc/nginx/ssl/
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $IMAGE_NAME .'
                    sh 'docker tag $IMAGE_NAME $FULL_IMAGE_NAME'
                }
            }
        }

        stage('Push to Private Registry') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "docker login $REGISTRY -u $DOCKER_USER -p $DOCKER_PASS"
                        sh 'docker push $FULL_IMAGE_NAME'
                    }
                }
            }
        }

        stage('Save Docker Image as TAR') {
            steps {
                script {
                    sh 'docker save -o saran-ui-app.tar $IMAGE_NAME'
                }
            }
        }

        stage('Deploy App to Application VM') {
            steps {
                script {
                    sshagent(credentials: ["${CREDENTIALS_ID}"]) {
                        sh """
                        echo "Deploying app to VM: ${VM1_IP}"
                        scp -o StrictHostKeyChecking=no saran-ui-app.tar ${SSH_USER}@${VM1_IP}:/tmp/
                        ssh -o StrictHostKeyChecking=no ${SSH_USER}@${VM1_IP} '
                            docker stop ${CONTAINER_NAME} || true &&
                            docker rm ${CONTAINER_NAME} || true &&
                            docker load -i /tmp/saran-ui-app.tar &&
                            docker run -d -p 80:80 -p ${APP_PORT}:443 --restart=always --name ${CONTAINER_NAME} ${IMAGE_NAME}
                        '
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed. Status: ${currentBuild.result ?: 'SUCCESS'}"
        }

        success {
            script {
                emailext(
                    attachLog: true,
                    subject: "[SUCCESS] Build #${env.BUILD_NUMBER} - ${PROJECT_NAME}",
                    from: "${EMAIL_SENDER}",
                    to: "${EMAIL_RECIPIENTS}",
                    mimeType: 'text/html',
                    body: """
                    <html>
                        <body style="font-family: Arial, sans-serif;">
                            <h2 style="color: #28a745;">Build Successful</h2>
                            <hr>
                            <p><strong>Project:</strong> ${PROJECT_NAME}</p>
                            <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                            <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                            <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        </body>
                    </html>
                    """
                )
            }
        }

        failure {
            script {
                emailext(
                    attachLog: true,
                    subject: "[FAILURE] Build #${env.BUILD_NUMBER} - ${PROJECT_NAME}",
                    from: "${EMAIL_SENDER}",
                    to: "${EMAIL_RECIPIENTS}",
                    mimeType: 'text/html',
                    body: """
                    <html>
                        <body style="font-family: Arial, sans-serif;">
                            <h2 style="color: #dc3545;">Build Failed</h2>
                            <hr>
                            <p><strong>Project:</strong> ${PROJECT_NAME}</p>
                            <p><strong>Job:</strong> ${env.JOB_NAME}</p>
                            <p><strong>Build Number:</strong> ${env.BUILD_NUMBER}</p>
                            <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        </body>
                    </html>
                    """
                )
            }
        }
    }
}




<---Nginx Configuration (nginx.conf)  -->


events {}

http {
    include /etc/nginx/mime.types;

    server {
        listen 80;
        server_name saaraninfosphere.com;

        # Redirect to HTTPS.
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl;
        server_name saaraninfosphere.com;

        root /usr/share/nginx/html;
        index index.html;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}











<----Dockerfile--->

# Stage 0: Build stage using Node.js
FROM node:18.13 AS build-stage

WORKDIR /app
COPY package*.json /app/
RUN npm install
COPY ./ /app/
RUN npm run build

# Stage 1: Production stage using Nginx
FROM nginx:1.21

# Create SSL directory
RUN mkdir -p /etc/nginx/ssl

# Clear the default Nginx HTML directory
RUN rm -rf /usr/share/nginx/html/*

# Copy compiled app from build stage
COPY --from=build-stage /app/dist/main-site/browser /usr/share/nginx/html

# Copy SSL certificates
COPY etc/nginx/ssl/cert.pem /etc/nginx/ssl/cert.pem
COPY etc/nginx/ssl/key.pem /etc/nginx/ssl/key.pem

# Copy Nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Expose HTTP and HTTPS ports
EXPOSE 80
EXPOSE 443

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]

